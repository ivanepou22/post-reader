Component life cycle methods
-ngOnChanges()
-ngOnInit()
-ngDoCheck()
-ngAfterContentInit()
-ngAfterContentChecked()
-ngAfterViewInit()
-ngAfterViewChecked()
-ngOnDestroy()

//===============================
ngOnInit(): void {
    // Component initialization code here
  }

  ngOnDestroy(): void {
    // Component destruction code here
  }
//===============================

DIRECTIVES
- Manipulate the DOM
- Adding or removing elements
- Changing how elements look or behave
Types of DIRECTIVES
 - Component: - are directives with a template
 - Structural DIRECTIVES: - Add or remove DOM elements
 - Attribute DIRECTIVES: Modifying the appearance or behavior of elements.

 Examples

 1. ngFor - Allows us to iterate on a list or collection. (Looping Through Data with ngFo)

 So far, we've seen many ways that data can flow within an application:

From the component class to the template: interpolation
From the template to the component class: event binding
From the parent component to its child component: input property binding
What happens, though, if we want a child component to share data _up_ to its parent component? How do we facilitate this upward flow of data, and how can the parent component stay informed about what happens in the child component?

Passing Data From Child to Parent: @Output